version: '3.8'

services:

  eureka:

    build: ./eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - micro-net
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 10

  config-service:
    build: ./config-server
    container_name: config-service
    ports:
      - "8888:8888"
    depends_on:
      eureka:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 10
    environment:
      - SPRING_EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8761/eureka/
    networks:
      - micro-net

  gateway:
    build: ./gateway
    container_name: gateway
    ports:
      - "8085:8085"
    depends_on:
      config-service:
        condition: service_healthy
      eureka:
        condition: service_healthy
    environment:
      - SPRING_EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8761/eureka/
    networks:
      - micro-net

  checkout-service:
    build: ./checkout-service
    container_name: checkout-service
    ports:
      - "8082:8082"
    depends_on:
      eureka:
        condition: service_healthy
    environment:
      - SPRING_EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8761/eureka/
    networks:
      - micro-net

  products-service:
    build: ./products-service
    container_name: products-service
    ports:
      - "8081:8081"
    depends_on:
      eureka:
        condition: service_healthy
    environment:
      - SPRING_EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8761/eureka/
    networks:
      - micro-net

  payments:
    build: ./payments
    container_name: payments
    ports:
      - "8086:8086"
    depends_on:
      eureka:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - SPRING_EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka:8761/eureka/
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASS=guest
    networks:
      - micro-net

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"     # para la app
      - "15672:15672"   # para la consola web
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - micro-net

  postgres-keycloak:
    image: postgres:15
    container_name: postgres-keycloak
    restart: always
    environment:
      POSTGRES_DB: keycloakdb
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloakpass

    volumes:
      - keycloak_postgres_data:/var/lib/postgresql/data
    networks:
      - micro-net

  keycloak:
    image: quay.io/keycloak/keycloak:26.2.5
    container_name: keycloak
    command:
      - start-dev
      - --import-realm
    depends_on:
      - postgres-keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: postgres-keycloak
      KC_DB_URL_DATABASE: keycloakdb
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloakpass
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - ./realms:/opt/keycloak/data/import
    networks:
      - micro-net

volumes:
  keycloak_postgres_data:



networks:
  micro-net:
    driver: bridge
